<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc.xsd
         http://code.alibabatech.com/schema/dubbo
         http://code.alibabatech.com/schema/dubbo/dubbo.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--每个dubbo应用(服务提供方和服务消费方)都必须指定一个唯一的名称-->
    <dubbo:application name="dd_provider"></dubbo:application>
    <!--指定服务的注册中心-->
    <dubbo:registry address="zookeeper://121.4.53.107:2181"></dubbo:registry>
    <!--配置协议和端口-->
    <dubbo:protocol name="dubbo" port="20881"></dubbo:protocol>
    <!--指定包扫描，用于发布dubbo服务-->
    <dubbo:annotation package="cn.ylj.api.impl"></dubbo:annotation>

<!--    &lt;!&ndash; 配置方式发布服务   &ndash;&gt;-->
<!--    <bean id="helloService" class="cn.ylj.api.impl.HelloServiceImpl"></bean>-->
<!--    &lt;!&ndash;  动态代理生成IHelloService代理类，目标对象是id="helloService"的bean，增强的功能是dubbo的功能 &ndash;&gt;-->
<!--    <dubbo:service interface="cn.ylj.api.IHelloService" ref="helloService"></dubbo:service>-->

<!--  Mybatis -->
    <!--  加载外部properties属性文件  -->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <!--    注入SqlSessionFactory对象-->
    <bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="ds"></property>
        <!--  加载核心配置文件  -->
        <property name="configLocation" value="classpath:spring-sqlMapConfig.xml"></property>
    </bean>

    <!-- 扫描mapper接口，创建代理sqlSession的动态代理对象，在核心配置文件中也能配，但是Mybatis给出了兼容spring的配置类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--  扫描完这个包，IoC容器中就有代理类了 -->
        <property name="basePackage" value="cn.ylj.mapper"></property>
    </bean>


<!--    事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="ds"></property>
    </bean>

    <!--  事务的注解驱动,可以扫描@Transaction -->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
</beans>